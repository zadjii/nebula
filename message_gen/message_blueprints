#The files generated from this file get dropped into the following places:
# PYTHON
#    `/messages/` contains all message.py classes, and
#    `MessageDeserializer.py` which has the translation table.
#    `/msg_codes.py` which has the actual ints for each message type
#    Drop all of these guys into nebula, s.t. .../out === .../nebula
# JAVASCRIPT: TODO
# drop the generated /out/js/messages.js into static? I think?
# I just comment out the TODO messages for now. JS won't need to be creating
#   them for all i know.
# On Windows, run copy_messages.cmd to place all the python files into the
#   appropriate locations.

################################################################################
# Messages
################################################################################

0   , NEW_HOST              , string:ipv6, int:port     , int:wsport    , string:hostname
1   , ASSIGN_HOST_ID        , int:id    , string:key    , string:cert
2   , HOST_HANDSHAKE        , int:id    , string:ipv6   , int:port      , int:wsport    , last_sync , last_modified , string:hostname, int:used_space, int:remaining_space

3   , REMOTE_HANDSHAKE      , int:id    , new_sync  , sync_end  , last_all_sync , blob:hosts
4   , REM_HANDSHAKE_GO_FETCH # todo#65 not done

5   , REQUEST_CLOUD         , int:id    , string:cloud_uname  , string:cname  , string:username  , string:passw
# note: purposefully no wsport, this is for H->H only.
# The owner_ids are used to set up the first mirror's PrivateData file.
6   , GO_RETRIEVE_HERE      , int:id    , ip            , int:port      , blob:owner_ids    , int:max_size

# HHF is my_id asking other_id for the files at root and below on cloud (uname, cname)
8   , HOST_HOST_FETCH       , int:my_id    , int:other_id    , string:cloud_uname, string:cname  , string:root
9   , HOST_FILE_TRANSFER    , int:id    , string:cloud_uname, string:cname  , string:fpath, int:fsize, bool:isdir, last_sync

10  , MAKE_CLOUD_REQUEST #todo not done
11  , MAKE_CLOUD_RESPONSE #todo not done

12  , MAKE_USER_REQUEST #todo not done
13  , MAKE_USER_RESPONSE #todo not done

14  , MIRRORING_COMPLETE    , int:id    , string:cloud_uname, string:cname

15  , GET_HOSTS_REQUEST     , int:id    , string:cloud_uname, string:cname

# 16 GHRp - Manual

# Used for both H->H and C->H transfers. Should be sent in response to each file.
#todo:23
17  , FILE_TRANSFER_SUCCESS , string:cloud_uname, string:cname, string:fpath

18  , REMOVE_FILE           , int:id    , string:cloud_uname, string:cname  , string:fpath
19  , HOST_FILE_PUSH        , int:tid   , string:cloud_uname, string:cname  , string:fpath # target id? I don't remember....

20  , STAT_FILE_REQUEST     , sid       , string:cloud_uname, string:cname  , string:fpath
# 21 SFRp - Manual

22  , LIST_FILES_REQUEST    , sid       , string:cloud_uname, string:cname, string:fpath
# 23 LFRp - Manual

24  , READ_FILE_REQUEST     , sid       , string:cloud_uname, string:cname, string:fpath
25  , READ_FILE_RESPONSE    , sid       , string:fpath, int:fsize #todo not done

26  , CLIENT_SESSION_REQUEST    , string:uname  , string:passw
28  , CLIENT_SESSION_RESPONSE   , sid

# C->R, refreshes the remote's timeout of the client session.
#   Should be used in tandem whenever the client reads/writes from the host.
27, CLIENT_SESSION_REFRESH  , sid

29  , CLIENT_FILE_PUT           , sid, string:cloud_uname, string:cname, string:fpath
30  , CLIENT_FILE_TRANSFER      , sid, string:cloud_uname, string:cname, string:fpath, int:fsize, bool:isdir

31  , CLIENT_GET_CLOUDS_REQUEST     , sid

# these two args get arrays of strings filled with the cnames for a user's clouds
32  , CLIENT_GET_CLOUDS_RESPONSE    , sid, blob:owned, blob:shared

33  , CLIENT_GET_CLOUD_HOST_REQUEST      , sid, string:cloud_uname, string:cname
34  , CLIENT_GET_CLOUD_HOST_RESPONSE     , sid, string:cloud_uname, string:cname, ip, int:port  , int:wsport

# These are only the hosts that have heartbeat recently
35  , GET_ACTIVE_HOSTS_REQUEST     , int:id    , string:cloud_uname, string:cname
# 36 GAHRp - Manual

# note: adding the uname to this message, even though it's not used for addressing clouds yet.
#   also, the host_id is needed so the remote can prepare another host for the request,
#   but a normal client won't know the host id, or, I mean I guess they could... Should investigate todo
37  , CLIENT_MIRROR , sid   , int:host_id   , string:cloud_uname  , string:cname

38  , CLIENT_GET_CLOUD_HOSTS_REQUEST      , sid, string:cloud_uname, string:cname
# The remote fills hosts with [host.to_json for host in cloud.hosts]
39  , CLIENT_GET_CLOUD_HOSTS_RESPONSE     , sid, blob:hosts

40  , HOST_VERIFY_CLIENT_REQUEST, int:id, sid, string:cloud_uname, string:cname
# The user ID is to tell the host the user's ID, for file auth purposes
41  , HOST_VERIFY_CLIENT_SUCCESS, int:id, sid, string:cloud_uname, string:cname, int:user_id

42  , HOST_VERIFY_HOST_REQUEST, int:my_id, int:their_id, string:cloud_uname, string:cname
43  , HOST_VERIFY_HOST_SUCCESS, int:my_id, int:their_id, string:cloud_uname, string:cname

44  , MIRROR_SUCCESS

# sent from C->H->R
45  , CLIENT_ADD_OWNER  , sid   , new_user_id, cloud_uname, cname
46  , ADD_OWNER_SUCCESS , sid   , new_user_id, cloud_uname, cname

47  , GET_USER_ID       , string:username
# id<0 indicates error
48  , USER_ID_RESPONSE  , string:username, int:id

# C->H
49  , CLIENT_ADD_CONTRIBUTOR, sid   , new_user_id, cloud_uname, cname, fpath, permissions
# H->R
50  , ADD_CONTRIBUTOR   , host_id   , new_user_id, cloud_uname, cname
# R->H->C
51  , ADD_CONTRIBUTOR_SUCCESS   , new_user_id, cloud_uname, cname

# M->H - This message is sent from a mirroring process to a host on the same machine (if one exists)
#   so that the host can wake up and start hosting the new mirror as well, instead of waiting for the 30s timeout
52  , REFRESH_MESSAGE

# H->R
# if my_id is -1, then assume it's a new host that's connecting.
#todo: add more information to this message so that the remote can validate
#   this is in fact the host that it gave that ID.
53  , HOST_MOVE_REQUEST, int:my_id, string:ip, string:csr
# R->H
54  , HOST_MOVE_RESPONSE, int:host_id, string:crt

55  , CLIENT_UPGRADE_CONNECTION_REQUEST, int:upgrade_type, blob:value
56  , ENABLE_ALPHA_ENCRYPTION_RESPONSE, string:host_public_key

57  , CLIENT_MAKE_DIRECTORY , sid  ,  string:cloud_uname  , string:cname, string:root, string:dir_name
# I don't believe this will EVER be used. making a dir will return FILE_TRANSFER_SUCCESS TODO remove this
58  , CLIENT_MAKE_DIRECTORY_RESPONSE

59  , CLIENT_GET_PERMISSIONS , sid ,  string:cloud_uname  , string:cname, string:path
60  , CLIENT_GET_PERMISSIONS_RESPONSE, int:permission

61  , CLIENT_GET_SHARED_PATHS , sid,  string:cloud_uname  , string:cname
# paths:[{string:path, int:permissions}]
62  , CLIENT_GET_SHARED_PATHS_RESPONSE, blob:paths

63  , CLIENT_CREATE_LINK_REQUEST , sid,  string:cloud_uname  , string:cname, string:path
64  , CLIENT_CREATE_LINK_RESPONSE, string:link_string

65  , HOST_RESERVE_LINK_REQUEST , string:cloud_uname  , string:cname
66  , HOST_RESERVE_LINK_RESPONSE , string:link_string

67  , CLIENT_GET_LINK_HOST , sid, string:link_string
#   We'll reply with a CLIENT_GET_CLOUD_HOST_RESPONSE, so no link-specific response
68  , CLIENT_READ_LINK, sid, string:link_string

69  , CLIENT_DELETE_FILE_REQUEST , sid,  string:cloud_uname  , string:cname, string:path
70  , CLIENT_DELETE_DIR_REQUEST , sid,  string:cloud_uname  , string:cname, string:path, bool:recursive
71  , CLIENT_DELETE_RESPONSE

72  , CLIENT_SET_LINK_PERMISSIONS, sid, string:link_string, int:permissions
73  , CLIENT_ADD_USER_TO_LINK, sid, string:link_string, int:user_id
74  , CLIENT_REMOVE_USER_FROM_LINK, sid, string:link_string, int:user_id
75  , CLIENT_SET_LINK_PERMISSIONS_SUCCESS
76  , CLIENT_GET_LINK_PERMISSIONS_REQUEST, sid, string:link_string
77  , CLIENT_GET_LINK_PERMISSIONS_RESPONSE, int:permissions, blob:users
# FILE_SYNC_REQUEST is for one host to request the changes between two timestamps from another host
# FILE_SYNC_PROPOSAL is for one host to tell another "I believe this file changed.
#       If you're cool with it, I'm going to send it to you."
# For both of these messages:
# src_id is the id of the requesting mirror
# tgt_id is the id of the mirror we're sending to
78  , FILE_SYNC_REQUEST , int:src_id, int:tgt_id, string:uname  , string:cname, sync_start, sync_end
79  , FILE_SYNC_PROPOSAL, int:src_id, int:tgt_id, string:rel_path, string:tgt_path, int:change_type, bool:is_dir, sync_time
80  , FILE_SYNC_RESPONSE, int:resp_type
################################################################################
#manually updated ones:
################################################################################

###############################
# GHRp - yea just replace this ctor entirely:
#    def __init__(self, cloud=None):
#        # type: (Cloud) -> None
#        super(GetActiveHostsResponseMessage, self).__init__()
#        self.type = GET_ACTIVE_HOSTS_RESPONSE
#        self.cname = ''
#        self.cloud_uname = ''
#        self.hosts = []
#        if cloud is not None:
#            self.cname = cloud.name
#            self.cloud_uname = cloud.uname()
#            self.hosts = cloud.get_get_hosts_dict(active_only=True)
16  , GET_HOSTS_RESPONSE    , string:cname  , string:cloud_uname, todo:hosts

###############################
# SFRp - manually add the following:
#        self.stat = make_stat_dict(fpath)
#    and remove that arg.
#    and add from messages.util import *
21  , STAT_FILE_RESPONSE    , sid       , string:cname, string:fpath, todo:stat

###############################
# LFRp - manually add the following:
#        self.stat = make_stat_dict(fpath)
#        self.ls = make_ls_array(fpath)
#    and remove those args.
#    and add from messages.util import *
#    also, get rid of the member rel_path... see:
#        self.fpath = rel_path
#    there is no rel_path member
23  , LIST_FILES_RESPONSE   , sid       , string:cname, string:rel_path, string:fpath, todo:ls, todo:stat

###############################
# GAHRp - yea just replace this ctor entirely:
#    def __init__(self, cloud=None):
#        super(GetActiveHostsResponseMessage, self).__init__()
#        self.type = GET_ACTIVE_HOSTS_RESPONSE
#        self.cname = ''
#        self.cloud_uname = ''
#        self.hosts = []
#        if cloud is not None:
#            self.cname = cloud.name
#            self.cloud_uname = cloud.uname()
#            self.hosts = cloud.get_get_hosts_dict(active_only=True)
36  , GET_ACTIVE_HOSTS_RESPONSE    , string:cname  , string:cloud_uname, todo:hosts
################################################################################
# Errors
################################################################################

-1  , GENERIC_ERROR
-2  , AUTH_ERROR
-3  , UNPREPARED_HOST_ERROR
-4  , FILE_IS_DIR_ERROR
-5  , FILE_IS_NOT_DIR_ERROR
-6  , FILE_DOES_NOT_EXIST_ERROR
# todo: return an int message instead, use a resource table to translate
-7  , HOST_VERIFY_CLIENT_FAILURE, string:message
-8  , CLIENT_AUTH_ERROR, string:message
-9  , INVALID_STATE, string:message
-10 , NO_ACTIVE_HOST, string:cloud_uname, string:cname
-11 , INVALID_PERMISSIONS, string:message
# sent both by remote->host during the HVHRq,
#   then also from H->H in during HOST_HOST_FETCH
-12 , HOST_VERIFY_HOST_FAILURE, string:message
-13 , UNKNOWN_IO_ERROR, string:message
# Used to reject client writes of .nebs files. Clients can read, but not write.
-14 , SYSTEM_FILE_WRITE_ERROR, string:message
# used to indicate that a mirror attempt was unsuccessful
-15 , MIRROR_FAILURE    , string:message
-16  , ADD_OWNER_FAILURE    , string:message
-17  , ADD_CONTRIBUTOR_FAILURE    , string:message
-18  , FILE_ALREADY_EXISTS    , string:message
-19  , DIR_IS_NOT_EMPTY, string:message
-20  , LINK_DOES_NOT_EXIST, string:message
-21  , UNKNOWN_MESSAGE_ERROR

# ideas for this file:
# superclasses. Let messages extend from abstract base messages.
# functional args. Look at ListFiles, etc. They require packing in a json
#     that's generated by a function. so, that doesn't work super well with this
#     method of generating.
# Constants for certain args, like cname, sid, that auto fill arg type and name
#    so if we want to change an arg a little bit, we don't need to copy-paste
#    a billion places
